@model DataVizNavigator1.Models.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard - DataVizNavigator";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1>Dashboard</h1>
            <p class="text-muted">Overview of your data visualizations and insights</p>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Total Mappings</h5>
                    <h2>@Model.TotalMappings</h2>
                    <a asp-controller="Mappings" asp-action="Index" class="text-primary">View all mappings</a>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Total Charts</h5>
                    <h2>@Model.TotalCharts</h2>
                    <a asp-controller="Charts" asp-action="Saved" class="text-primary">View all charts</a>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Most Used Chart Type</h5>
                    <div class="d-flex align-items-center">
                        <i class="bi bi-bar-chart-fill me-2" style="font-size: 1.5rem;"></i>
                        <h2 class="text-capitalize">@Model.MostUsedChartType</h2>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Quick Actions</h5>
                    <div class="d-grid gap-2">
                        <a asp-controller="Mappings" asp-action="Create" class="btn btn-outline-primary">
                            New Mapping
                        </a>
                        <a asp-controller="Charts" asp-action="Dashboard" class="btn btn-outline-success">
                            New Chart
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Charts Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Recent Charts</h5>
                    <a asp-controller="Charts" asp-action="Saved" class="btn btn-sm btn-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (Model.RecentCharts.Any())
                    {
                        <div class="row">
                            @foreach (var chart in Model.RecentCharts)
                            {
                                <div class="col-md-6 mb-4">
                                    <div class="card h-100 shadow-sm">
                                        <div class="card-header">
                                            <h6 class="mb-0">@chart.Name</h6>
                                        </div>
                                        <div class="card-body">
                                            <canvas id="chart-@chart.Id" style="width: 100%; height: 200px;"></canvas>
                                        </div>
                                        <div class="card-footer">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">@chart.CreatedOn.ToString("MM/dd/yyyy")</small>
                                                <a asp-controller="Charts" asp-action="View" asp-route-id="@chart.Id" class="btn btn-sm btn-info">
                                                    View Details
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Pagination Controls -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <nav aria-label="Chart pagination">
                                    <ul class="pagination justify-content-center">
                                        @if (Model.HasPreviousPage)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" asp-action="Index" asp-route-page="1" asp-route-pageSize="@Model.PageSize">First</a>
                                            </li>
                                            <li class="page-item">
                                                <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">First</span>
                                            </li>
                                            <li class="page-item disabled">
                                                <span class="page-link">Previous</span>
                                            </li>
                                        }

                                        @{
                                            const int maxPagesToShow = 5;
                                            int startPage = Math.Max(1, Model.CurrentPage - (maxPagesToShow / 2));
                                            int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);

                                            if (endPage - startPage + 1 < maxPagesToShow)
                                            {
                                                startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                                            }
                                        }

                                        @for (int i = startPage; i <= endPage; i++)
                                        {
                                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                                            </li>
                                        }

                                        @if (Model.HasNextPage)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" asp-action="Index" asp-route-page="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
                                            </li>
                                            <li class="page-item">
                                                <a class="page-link" asp-action="Index" asp-route-page="@Model.TotalPages" asp-route-pageSize="@Model.PageSize">Last</a>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item disabled">
                                                <span class="page-link">Next</span>
                                            </li>
                                            <li class="page-item disabled">
                                                <span class="page-link">Last</span>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                                <div class="text-center mt-2">
                                    <span class="text-muted">Page @Model.CurrentPage of @Model.TotalPages</span>
                                </div>

                                <!-- Page Size Selector -->
                                <div class="text-center mt-3">
                                    <div class="btn-group" role="group" aria-label="Page size selector">
                                        <a asp-action="Index" asp-route-page="1" asp-route-pageSize="10" class="btn @(Model.PageSize == 10 ? "btn-primary" : "btn-outline-primary")">10</a>
                                        <a asp-action="Index" asp-route-page="1" asp-route-pageSize="20" class="btn @(Model.PageSize == 20 ? "btn-primary" : "btn-outline-primary")">20</a>
                                        <a asp-action="Index" asp-route-page="1" asp-route-pageSize="50" class="btn @(Model.PageSize == 50 ? "btn-primary" : "btn-outline-primary")">50</a>
                                        <a asp-action="Index" asp-route-page="1" asp-route-pageSize="100" class="btn @(Model.PageSize == 100 ? "btn-primary" : "btn-outline-primary")">100</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <p class="mt-3">No charts created yet.</p>
                            <a asp-controller="Charts" asp-action="Dashboard" class="btn btn-primary">Create Your First Chart</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Render each recent chart
        @foreach (var chart in Model.RecentCharts)
        {
            <text>
                        try {
                            const chartData_@(chart.Id) = @Html.Raw(chart.ChartData);
                            renderChart('chart-@chart.Id', chartData_@(chart.Id), '@chart.ChartType');
                        } catch (e) {
                            console.error("Error rendering chart @chart.Id:", e);
                        }
            </text>
        }
        });

        function renderChart(canvasId, chartData, chartType) {
            const ctx = document.getElementById(canvasId).getContext('2d');

            // Parse data if it's a string
            const data = typeof chartData === 'string' ? JSON.parse(chartData) : chartData;

            // Define vibrant colors
            const colors = [
                'rgba(255, 99, 132, 0.7)',   // Red
                'rgba(54, 162, 235, 0.7)',   // Blue
                'rgba(255, 206, 86, 0.7)',   // Yellow
                'rgba(75, 192, 192, 0.7)',   // Green
                'rgba(153, 102, 255, 0.7)',  // Purple
                'rgba(255, 159, 64, 0.7)'    // Orange
            ];

            const borderColors = colors.map(color => color.replace('0.7)', '1)'));

            // Apply colors to datasets
            if (data.datasets && data.datasets.length > 0) {
                data.datasets.forEach((dataset, index) => {
                    const colorIndex = index % colors.length;

                    if (chartType === 'pie' || chartType === 'doughnut') {
                        dataset.backgroundColor = colors;
                        dataset.borderColor = borderColors;
                    } else if (chartType === 'bar') {
                        dataset.backgroundColor = colors[colorIndex];
                        dataset.borderColor = borderColors[colorIndex];
                    } else {
                        dataset.backgroundColor = 'rgba(75, 192, 192, 0.2)';
                        dataset.borderColor = 'rgba(75, 192, 192, 1)';
                    }

                    dataset.borderWidth = 1;
                });
            }

            // Create chart
            new Chart(ctx, {
                type: chartType,
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: chartType === 'pie' || chartType === 'doughnut',
                            position: 'bottom'
                        }
                    },
                    scales: chartType !== 'pie' && chartType !== 'doughnut' ? {
                        y: {
                            beginAtZero: true
                        }
                    } : {}
                }
            });
        }
    </script>
}